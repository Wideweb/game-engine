/////////////////////////////////////////////////////////////
////////////////// NORMAL MAPPING BEGIN /////////////////////
/////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
/////////////////////// DECLARATION /////////////////////////
/////////////////////////////////////////////////////////////
void handleNormal(mat4 modelMatrix, vec3 vertexTangent, vec3 vertexNormal);
mat3 calculateTBN(mat4 modelMatrix, vec3 vertexTangent, vec3 vertexNormal);

/////////////////////////////////////////////////////////////
///////////////////////// VARYING ///////////////////////////
/////////////////////////////////////////////////////////////
#ifdef NOMRAL_MAPPING
out mat3 v_TBN;
#endif

out vec3 v_normal;

/////////////////////////////////////////////////////////////
////////////////////////// MAIN /////////////////////////////
/////////////////////////////////////////////////////////////
void handleNormal(mat4 modelMatrix, vec3 vertexTangent, vec3 vertexNormal) {
#ifdef NOMRAL_MAPPING
    v_TBN = calculateTBN(modelMatrix, vertexTangent, vertexNormal);
#endif

    v_normal = normalize(mat3(transpose(inverse(modelMatrix))) * vertexNormal);
}

mat3 calculateTBN(mat4 modelMatrix, vec3 vertexTangent, vec3 vertexNormal) {
    vec3 T = normalize(vec3(modelMatrix * vec4(vertexTangent, 0.0)));
    vec3 N = normalize(vec3(modelMatrix * vec4(vertexNormal, 0.0)));

    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);

    return mat3(T, B, N);
}

/////////////////////////////////////////////////////////////
/////////////////// NORMAL MAPPING END //////////////////////
/////////////////////////////////////////////////////////////
