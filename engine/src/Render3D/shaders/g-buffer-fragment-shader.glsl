#version 330 core

/////////////////////////////////////////////////////////////
/////////////////////// DECLARATION /////////////////////////
/////////////////////////////////////////////////////////////
struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D normal;
    float shininess;
};

/////////////////////////////////////////////////////////////
//////////////////////// DEFINES ////////////////////////////
/////////////////////////////////////////////////////////////
const vec3 c_fogColor = vec3(0.55, 0.69, 0.73);

/////////////////////////////////////////////////////////////
//////////////////////// UNIFORMS ///////////////////////////
/////////////////////////////////////////////////////////////
uniform Material u_material;
uniform float u_clipY;

/////////////////////////////////////////////////////////////
///////////////////////// VARYING ///////////////////////////
/////////////////////////////////////////////////////////////
in vec2 v_texCoord;
in vec3 v_fragPos;
in vec3 v_normal;
in float v_visibility;

/////////////////////////////////////////////////////////////
//////////////////////////// OUT ////////////////////////////
/////////////////////////////////////////////////////////////
layout(location = 0) out vec4 o_gColor;
layout(location = 1) out vec3 o_gPosition;
layout(location = 2) out vec3 o_gNormal;
layout(location = 3) out vec4 o_gSpecular;

/////////////////////////////////////////////////////////////
////////////////////////// MAIN /////////////////////////////
/////////////////////////////////////////////////////////////
void main() {
    if (v_fragPos.y < u_clipY) {
        discard;
    }

    o_gPosition = v_fragPos;
    o_gNormal = normalize(v_normal);
    o_gSpecular.rgb = texture(u_material.specular, v_texCoord).rgb;
    o_gSpecular.a = u_material.shininess;

    o_gColor = texture(u_material.diffuse, v_texCoord);
    o_gColor = mix(vec4(c_fogColor, 1.0), o_gColor, v_visibility);
}