#pragma once

#include "Point.hpp"
#include "Node.hpp"
#include "LevelPath.hpp"

#include <vector>
#include <memory>

namespace Engine {

/**
 * Хэндлер результатов многоуровнего поиска пути.
 *
 * Поиск пути по графу поиска состоит из двух основных этапов:
 * 1. Строится путь по абстрактным областям карты. В результате получается путь, который состоит
 * только из входов и выходов абстрактных областей, а также начальной и конечной позиций искомого пути.
 * 2. Строится путь по ячейкам игровой карты. Для этого последовательно запускается поиск пути между узлами
 * полученными на первом этапе поиска.
 *
 * Данный хэндлер позволяет получить доступ к результатам обоих этапов поиска пути, а также прервать дальнейшее
 * выполнение поиска после первого этапа.
 */
class HLevelPathFinderResultHandler {
  public:
    /**
     * Вызывается, когда найден абстрактный путь между начальной и конечной точкой пути.
     * @param abstractPath Абстрактный путь по узлам графа между начальной и конечной точкой пути.
     * @return True, если необходимо преобразовать абстрактный путь в путь по ячейкам карты, иначе - false.
     */
    virtual bool onLevelAbstractPathFound(const std::vector<std::shared_ptr<Node>>& abstractPath) = 0;

    /**
     * Вызывается, когда найден путь по ячейкам игровой карты между начальной и конечной точкой.
     * @param path Путь по ячейкам игровой карты между начальной и конечной точкой. Найденный путь представляет собой 
     * двумерный список, где каждый подмассив - это перемещение по определенному уровню, либо перемещение между уровнями.
     */
    virtual void onLevelPathFound(const std::vector<LevelPath>& path) = 0;

     /**
     * Вызывается, когда путь не был найден.
     */
    virtual void onLevelPathNotFound() = 0;
};

} // namespace Engine
